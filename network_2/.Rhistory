# This script loops over multiple subfolders within a parent directory,
# evaluates each .txt file in those folders to find the one with the smallest
# (i.e., most negative) difference between mean looking times for "Consistent"
# and "Inconsistent" events, and stores the results (including the best file
# path and associated statistics) in a summary dataframe for further inspection.
# loop over folders
parent_dir = "C:/Users/Deon T. Benton/Documents/projects/CLIPS2/network_2/errorResults"
folders = list.dirs(parent_dir, recursive = FALSE)
# Initialize empty dataframe to store results
results_df = data.frame(
folder = character(),
best_file = character(),
min_dif = numeric(),
mean_consistent = numeric(),
mean_inconsistent = numeric(),
stringsAsFactors = FALSE
)
# loop over each folder
for(folder in folders){
# get all of the files in the current folder
files = list.files(path = folder, pattern = ".txt", full.names = TRUE)
min_dif = Inf
best_file = ""
mean_consistent = NULL
mean_inconsistent = NULL
# now loop over each file in the folder
for (file in files) {
options(scipen=999)
file_name = basename(file)
data = read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$ID = rep(1:100, each = 2)
data$eventType = rep(c("Consistent", "Inconsistent"), each = 1, times = 100)
data$eventType = as.factor(data$eventType)
data$looking_time = data$V3
data = data[,-c(1:3)]
# Calculate largest p-value
dif = mean(data$looking_time[data$eventType=="Consistent"])-
mean(data$looking_time[data$eventType=="Inconsistent"])
# Check if this is the best model so far
if (dif < 0) {
min_dif = dif
best_file = file
mean_consistent = mean(data$looking_time[data$eventType=="Consistent"])
mean_inconsistent = mean(data$looking_time[data$eventType=="Inconsistent"])
}
}
# Append results to dataframe
results_df = rbind(results_df, data.frame(
folder = folder,
best_file = best_file,
min_dif = min_dif,
mean_consistent = mean_consistent,
mean_inconsistent = mean_inconsistent,
stringsAsFactors = FALSE
))
}
fix(results_df)
X = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
# Compute correlation matrix (pairwise correlations between rows)
cor_matrix <- cor(t(X))
install.packages("pheatmap")  # Run only once
library(pheatmap)
# Load the data
df <- read.table(file.choose(),
header = FALSE, stringsAsFactors = FALSE)
names(df)
paste0("unit_", 1:20)
colnames(df) <- c("trial", "event", "layer", paste0("unit_", 1:20))
names(Df)
names(df)
fix(df)
# Create a unique label for each row
df$label <- paste(df$event, df$layer, df$trial, sep = "_")
# Create a unique label for each row
df$label <- paste(df$event, df$layer, df$trial, sep = "_")
fix(df)
as.matrix(df[, paste0("unit_", 1:20)])
df$label
rownames(X) <- df$label
X <- as.matrix(df[, paste0("unit_", 1:20)])
rownames(X) <- df$label
fix(X)
# Compute 1 - correlation dissimilarity matrix
cor_matrix <- cor(t(X))
cor_matrix
fix(cor_matrix)
cor_matrix <- cor(t(X))
dissimilarity_matrix <- 1 - cor_matrix
# Plot the RSA matrix as a heatmap
pheatmap(dissimilarity_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Representational Dissimilarity Matrix (1 - Correlation)")
fix(df)
# Load required package
install.packages("pheatmap")  # Run only once
library(pheatmap)
# Load the data
df <- read.table(file.choose(),
header = FALSE, stringsAsFactors = FALSE)
# Assign column names
colnames(df) <- c("trial", "event", "layer", paste0("unit_", 1:20))
# Create a unique label for each row
df$label <- paste(df$event, df$layer, df$trial, sep = "_")
# Subset the first four rows
df_small <- df[1:4, ]
# Extract only the numeric activations
X <- as.matrix(df_small[, paste0("unit_", 1:20)])
rownames(X) <- df_small$label
# Compute 1 - correlation dissimilarity matrix
cor_matrix <- cor(t(X))
dissimilarity_matrix <- 1 - cor_matrix
# Plot the RSA matrix as a heatmap
pheatmap(dissimilarity_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Representational Dissimilarity Matrix (1 - Correlation)")
# Plot the RSA matrix as a heatmap
pheatmap(dissimilarity_matrix,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Representational Dissimilarity Matrix (1 - Correlation)")
# Plot the RSA matrix as a heatmap
pheatmap(dissimilarity_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Representational Dissimilarity Matrix (1 - Correlation)")
fix(df)
fix(X)
# Create a unique label for each row
df$label = paste(df$event, df$layer, df$trial, sep = "_")
# Subset the first four rows
df_small = df[1:4, ]
# Extract only the numeric activations
X = as.matrix(df[, paste0("unit_", 1:20)])
rownames(X) = df$label
# Compute 1 - correlation dissimilarity matrix
cor_matrix = cor(t(X))
dissimilarity_matrix = 1 - cor_matrix
fix(X)
# Assign column names
colnames(df) = c("trial", "event", "layer", paste0("unit_", 1:20))
# Create a unique label for each row
df$base_label <- paste(df$event, df$layer, df$trial, sep = "_")
df$label <- make.unique(df$base_label)
# Subset the first four rows
df_small = df[1:4, ]
# Extract only the numeric activations
X = as.matrix(df[, paste0("unit_", 1:20)])
rownames(X) = df$label
# Compute 1 - correlation dissimilarity matrix
cor_matrix = cor(t(X))
dissimilarity_matrix = 1 - cor_matrix
# Plot the RSA matrix as a heatmap
pheatmap(dissimilarity_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Representational Dissimilarity Matrix (1 - Correlation)")
fix(X)
